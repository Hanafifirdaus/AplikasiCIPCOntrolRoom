
import java.awt.AWTException;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import static java.lang.System.exit;
import static java.lang.Thread.sleep;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Firdaus
 */
public class AplikasiCIPControlRoom extends javax.swing.JFrame {

    /**
     * Creates new form AplikasiCIPControlRoom
     */
    public AplikasiCIPControlRoom() {
        initComponents();
        setResizable(false);
        int waktumulai = 0;
        new Thread(){
            public void run(){
              while(waktumulai == 0){
                Calendar kalender = new GregorianCalendar();
                    int jam = kalender.get(Calendar.HOUR);
                    int menit = kalender.get(Calendar.MINUTE);
                    int detik = kalender.get(Calendar.SECOND);
                    int tahun = kalender.get(Calendar.YEAR);
                    int bulan = kalender.get(Calendar.MONTH);
                    int tanggal = kalender.get(Calendar.DATE);
                    int AM_PM = kalender.get(Calendar.AM_PM);
                    bulan = bulan+1;
                    String status = "";
                    
                    if(AM_PM == 1){
                    status = "Sore";
                 }

                 if(AM_PM == 0){
                    status = "Pagi";
                 }
                    
             String time = tanggal+"/"+bulan+"/"+tahun+" | "+jam + ":" + menit + ":" + detik +" "+status;  
             
             waktu.setText(time);
             
             texp.setBackground(Color.yellow);
             try {
                      sleep(100);
                  } catch (InterruptedException ex) {
                      Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(Level.SEVERE, null, ex);
                  }
             texp.setBackground(Color.green);
             
                  try {
                      sleep(1000);
                  } catch (InterruptedException ex) {
                      Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(Level.SEVERE, null, ex);
                  }
             
              }  
            }
            
        }.start();
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        L001 = new javax.swing.JButton();
        T011 = new javax.swing.JButton();
        L002 = new javax.swing.JButton();
        T031 = new javax.swing.JButton();
        T032 = new javax.swing.JButton();
        L003 = new javax.swing.JButton();
        T11 = new javax.swing.JTextField();
        T12 = new javax.swing.JTextField();
        T13 = new javax.swing.JTextField();
        T14 = new javax.swing.JTextField();
        T15 = new javax.swing.JTextField();
        T16 = new javax.swing.JTextField();
        R11 = new javax.swing.JButton();
        R12 = new javax.swing.JButton();
        R13 = new javax.swing.JButton();
        R14 = new javax.swing.JButton();
        R15 = new javax.swing.JButton();
        R16 = new javax.swing.JButton();
        A1 = new javax.swing.JTextField();
        A2 = new javax.swing.JTextField();
        A3 = new javax.swing.JTextField();
        A4 = new javax.swing.JTextField();
        A5 = new javax.swing.JTextField();
        A6 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        waktu = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        TA02 = new javax.swing.JButton();
        T31 = new javax.swing.JTextField();
        R31 = new javax.swing.JButton();
        C1 = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        L009 = new javax.swing.JButton();
        T041 = new javax.swing.JButton();
        T042 = new javax.swing.JButton();
        T051 = new javax.swing.JButton();
        T061 = new javax.swing.JButton();
        L010 = new javax.swing.JButton();
        T091 = new javax.swing.JButton();
        T092 = new javax.swing.JButton();
        T093 = new javax.swing.JButton();
        L014 = new javax.swing.JButton();
        T21 = new javax.swing.JTextField();
        T22 = new javax.swing.JTextField();
        T23 = new javax.swing.JTextField();
        T24 = new javax.swing.JTextField();
        T25 = new javax.swing.JTextField();
        T26 = new javax.swing.JTextField();
        T27 = new javax.swing.JTextField();
        T28 = new javax.swing.JTextField();
        T29 = new javax.swing.JTextField();
        T20 = new javax.swing.JTextField();
        R21 = new javax.swing.JButton();
        R23 = new javax.swing.JButton();
        R22 = new javax.swing.JButton();
        R24 = new javax.swing.JButton();
        R25 = new javax.swing.JButton();
        R26 = new javax.swing.JButton();
        R27 = new javax.swing.JButton();
        R28 = new javax.swing.JButton();
        R29 = new javax.swing.JButton();
        R20 = new javax.swing.JButton();
        B1 = new javax.swing.JTextField();
        B2 = new javax.swing.JTextField();
        B3 = new javax.swing.JTextField();
        B4 = new javax.swing.JTextField();
        B5 = new javax.swing.JTextField();
        B6 = new javax.swing.JTextField();
        B7 = new javax.swing.JTextField();
        B8 = new javax.swing.JTextField();
        B9 = new javax.swing.JTextField();
        B0 = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        EXP = new javax.swing.JButton();
        TL8 = new javax.swing.JTextField();
        E1 = new javax.swing.JTextField();
        REXP = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        texp = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        A7 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(3, 214, 58));

        jPanel2.setBackground(new java.awt.Color(0, 255, 255));

        jLabel2.setFont(new java.awt.Font("Perpetua", 3, 18)); // NOI18N
        jLabel2.setText("CLA");

        L001.setBackground(new java.awt.Color(0, 204, 0));
        L001.setText("L001");
        L001.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                L001ActionPerformed(evt);
            }
        });

        T011.setBackground(new java.awt.Color(0, 255, 0));
        T011.setText("T011");
        T011.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T011ActionPerformed(evt);
            }
        });

        L002.setBackground(new java.awt.Color(0, 255, 0));
        L002.setText("L002");
        L002.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                L002ActionPerformed(evt);
            }
        });

        T031.setBackground(new java.awt.Color(0, 255, 0));
        T031.setText("T031");
        T031.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T031ActionPerformed(evt);
            }
        });

        T032.setBackground(new java.awt.Color(51, 255, 0));
        T032.setText("T032");
        T032.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T032ActionPerformed(evt);
            }
        });

        L003.setBackground(new java.awt.Color(51, 255, 0));
        L003.setText("L003");
        L003.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                L003ActionPerformed(evt);
            }
        });

        R11.setText("RESET");
        R11.setEnabled(false);
        R11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                R11ActionPerformed(evt);
            }
        });

        R12.setText("RESET");
        R12.setEnabled(false);
        R12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                R12ActionPerformed(evt);
            }
        });

        R13.setText("RESET");
        R13.setEnabled(false);
        R13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                R13ActionPerformed(evt);
            }
        });

        R14.setText("RESET");
        R14.setEnabled(false);
        R14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                R14ActionPerformed(evt);
            }
        });

        R15.setText("RESET");
        R15.setEnabled(false);
        R15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                R15ActionPerformed(evt);
            }
        });

        R16.setText("RESET");
        R16.setEnabled(false);
        R16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                R16ActionPerformed(evt);
            }
        });

        A1.setText("CIP Next Time");

        A2.setText("CIP Next Time");

        A3.setText("CIP Next Time");

        A4.setText("CIP Next Time");

        A5.setText("CIP Next Time");

        A6.setText("CIP Next Time");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(T032, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)
                            .addComponent(T031, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(L002, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(T011, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(L001, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(T14, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                            .addComponent(T13)
                            .addComponent(T12)
                            .addComponent(T15)
                            .addComponent(T11)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(L003, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(T16, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)))
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(A1, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                            .addComponent(A2))
                        .addGap(4, 4, 4)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(R12)
                            .addComponent(R11)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(A6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(A5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                                .addComponent(A4)
                                .addComponent(A3)))
                        .addGap(4, 4, 4)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(R14)
                            .addComponent(R13)
                            .addComponent(R15)
                            .addComponent(R16))))
                .addContainerGap(12, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(176, 176, 176))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(L001)
                    .addComponent(T11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(R11)
                    .addComponent(A1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(T011)
                    .addComponent(T12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(R12)
                    .addComponent(A2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(L002)
                    .addComponent(T13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(R13)
                    .addComponent(A3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(T031)
                    .addComponent(T14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(R14)
                    .addComponent(A4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(T032)
                    .addComponent(T15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(R15)
                    .addComponent(A5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(L003)
                    .addComponent(T16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(R16)
                    .addComponent(A6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Monotype Corsiva", 3, 24)); // NOI18N
        jLabel1.setText("Aplikasi Pengingat CIP Processing");

        jLabel4.setText("Created BY Muhammad Hanafi Firdaus");

        jPanel3.setBackground(new java.awt.Color(0, 255, 255));

        jLabel3.setFont(new java.awt.Font("Perpetua", 3, 18)); // NOI18N
        jLabel3.setText("CLC");

        TA02.setBackground(new java.awt.Color(51, 255, 0));
        TA02.setText("TA02");
        TA02.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TA02ActionPerformed(evt);
            }
        });

        R31.setText("RESET");
        R31.setEnabled(false);
        R31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                R31ActionPerformed(evt);
            }
        });

        C1.setText("CIP Next Time");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TA02, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(T31, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(C1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(R31)
                .addGap(107, 107, 107))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(192, 192, 192)
                .addComponent(jLabel3)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TA02)
                    .addComponent(T31, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(R31)
                    .addComponent(C1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 28, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(0, 255, 255));

        jLabel5.setFont(new java.awt.Font("Perpetua", 3, 18)); // NOI18N
        jLabel5.setText("CLB");

        L009.setBackground(new java.awt.Color(51, 255, 0));
        L009.setText("L009");
        L009.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                L009ActionPerformed(evt);
            }
        });

        T041.setBackground(new java.awt.Color(51, 255, 0));
        T041.setText("T041");
        T041.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T041ActionPerformed(evt);
            }
        });

        T042.setBackground(new java.awt.Color(51, 255, 0));
        T042.setText("T042");
        T042.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T042ActionPerformed(evt);
            }
        });

        T051.setBackground(new java.awt.Color(51, 255, 0));
        T051.setText("T051");
        T051.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T051ActionPerformed(evt);
            }
        });

        T061.setBackground(new java.awt.Color(51, 255, 0));
        T061.setText("T061");
        T061.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T061ActionPerformed(evt);
            }
        });

        L010.setBackground(new java.awt.Color(51, 255, 0));
        L010.setText("L010");
        L010.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                L010ActionPerformed(evt);
            }
        });

        T091.setBackground(new java.awt.Color(51, 255, 0));
        T091.setText("T091");
        T091.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T091ActionPerformed(evt);
            }
        });

        T092.setBackground(new java.awt.Color(51, 255, 0));
        T092.setText("T092");
        T092.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T092ActionPerformed(evt);
            }
        });

        T093.setBackground(new java.awt.Color(51, 255, 0));
        T093.setText("T093");
        T093.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T093ActionPerformed(evt);
            }
        });

        L014.setBackground(new java.awt.Color(51, 255, 0));
        L014.setText("L014");
        L014.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                L014ActionPerformed(evt);
            }
        });

        R21.setText("RESET");
        R21.setEnabled(false);
        R21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                R21ActionPerformed(evt);
            }
        });

        R23.setText("RESET");
        R23.setEnabled(false);
        R23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                R23ActionPerformed(evt);
            }
        });

        R22.setText("RESET");
        R22.setEnabled(false);
        R22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                R22ActionPerformed(evt);
            }
        });

        R24.setText("RESET");
        R24.setEnabled(false);
        R24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                R24ActionPerformed(evt);
            }
        });

        R25.setText("RESET");
        R25.setEnabled(false);
        R25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                R25ActionPerformed(evt);
            }
        });

        R26.setText("RESET");
        R26.setEnabled(false);
        R26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                R26ActionPerformed(evt);
            }
        });

        R27.setText("RESET");
        R27.setEnabled(false);
        R27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                R27ActionPerformed(evt);
            }
        });

        R28.setText("RESET");
        R28.setEnabled(false);
        R28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                R28ActionPerformed(evt);
            }
        });

        R29.setText("RESET");
        R29.setEnabled(false);
        R29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                R29ActionPerformed(evt);
            }
        });

        R20.setText("RESET");
        R20.setEnabled(false);
        R20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                R20ActionPerformed(evt);
            }
        });

        B1.setText("CIP Next Time");

        B2.setText("CIP Next Time");

        B3.setText("CIP Next Time");

        B4.setText("CIP Next Time");

        B5.setText("CIP Next Time");

        B6.setText("CIP Next Time");

        B7.setText("CIP Next Time");

        B8.setText("CIP Next Time");

        B9.setText("CIP Next Time");

        B0.setText("CIP Next Time");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(L009, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(T041, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(T042, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(T051, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(T061, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(L010, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(T091, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(T092, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(T093, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(L014, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(T23, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                            .addComponent(T22)
                            .addComponent(T21))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(B5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                            .addComponent(B4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(B3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(B2)
                            .addComponent(B1)
                            .addComponent(B6, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(B7, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(B8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(R22)
                            .addComponent(R23)
                            .addComponent(R24)
                            .addComponent(R25)
                            .addComponent(R26)
                            .addComponent(R27)
                            .addComponent(R28)
                            .addComponent(R29)
                            .addComponent(R20)
                            .addComponent(R21))
                        .addGap(107, 107, 107))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(T20, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(T29, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(T28, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(T27, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(T26, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(T25, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(T24, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(B9, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(B0, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(192, 192, 192)
                .addComponent(jLabel5)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(L009)
                    .addComponent(T21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(R21)
                    .addComponent(B1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(T041)
                    .addComponent(T22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(B2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(R22))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(T042)
                    .addComponent(T23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(B3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(R23))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(T051)
                    .addComponent(T24, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(R24)
                    .addComponent(B4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(T061)
                    .addComponent(T25, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(R25)
                    .addComponent(B5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(L010)
                    .addComponent(T26, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(R26)
                    .addComponent(B6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(T091)
                    .addComponent(T27, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(R27)
                    .addComponent(B7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(T092)
                    .addComponent(T28, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(R28)
                    .addComponent(B8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(T093)
                    .addComponent(T29, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(R29)
                    .addComponent(B9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(L014)
                    .addComponent(T20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(R20)
                    .addComponent(B0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 13, Short.MAX_VALUE))
        );

        jPanel5.setBackground(new java.awt.Color(204, 0, 204));

        EXP.setBackground(new java.awt.Color(51, 255, 0));
        EXP.setText("EXP");
        EXP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EXPActionPerformed(evt);
            }
        });

        E1.setText("CIP Next Time");

        REXP.setText("RESET");
        REXP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                REXPActionPerformed(evt);
            }
        });

        jButton1.setText("EXIT");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Screenshoot CIP Last Time");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(EXP, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(TL8, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(E1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(REXP))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EXP)
                    .addComponent(TL8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(E1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(REXP))
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        jLabel6.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel6.setText("Legend : ");

        jButton2.setBackground(new java.awt.Color(51, 255, 0));
        jButton2.setText("EXP");

        jLabel9.setText("= Counter CIP siap dijalankan");

        jLabel7.setText("= Counter CIP 20 menit lagi");

        jLabel10.setText("= Waktunya CIP");

        jTextField1.setBackground(new java.awt.Color(255, 51, 51));

        A7.setText("CIP Next Time");

        jLabel8.setText("= Jadwal waktu CIP");

        jButton4.setText("RESET");
        jButton4.setEnabled(false);

        jLabel11.setText("= Untuk menghentikan counter CIP");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(texp)
                    .addComponent(jTextField1)
                    .addComponent(A7, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(texp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(A7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jLabel11))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 434, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(446, 446, 446))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(waktu, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(12, 12, 12)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(waktu, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void R16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_R16ActionPerformed
        // TODO add your handling code here:
        JOptionPane jop = new JOptionPane();
    int pilih = jop.showConfirmDialog(null, "Apakah Anda Yakin Untuk Menghentikan Proses Counter CLA L003 ?", "CIP Stop Konfirmasi", jop.YES_NO_OPTION);
    if(pilih == 0){
        R16.setText("STOP");
        L003.setEnabled(true);
    }
    else{
        
    }
    }//GEN-LAST:event_R16ActionPerformed

    private void R15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_R15ActionPerformed
        // TODO add your handling code here:
        JOptionPane jop = new JOptionPane();
    int pilih = jop.showConfirmDialog(null, "Apakah Anda Yakin Untuk Menghentikan Proses Counter CLA T032 ?", "CIP Stop Konfirmasi", jop.YES_NO_OPTION);
    if(pilih == 0){
        R15.setText("STOP");
        T032.setEnabled(true);
    }
    else{
        
    }
    }//GEN-LAST:event_R15ActionPerformed

    private void R14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_R14ActionPerformed
        // TODO add your handling code here:
       JOptionPane jop = new JOptionPane();
    int pilih = jop.showConfirmDialog(null, "Apakah Anda Yakin Untuk Menghentikan Proses Counter CLA T031 ?", "CIP Stop Konfirmasi", jop.YES_NO_OPTION);
    if(pilih == 0){
        R14.setText("STOP");
        T031.setEnabled(true);
    }
    else{
        
    }
    }//GEN-LAST:event_R14ActionPerformed

    private void R13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_R13ActionPerformed
        // TODO add your handling code here:
        JOptionPane jop = new JOptionPane();
    int pilih = jop.showConfirmDialog(null, "Apakah Anda Yakin Untuk Menghentikan Proses Counter CLA L002 ?", "CIP Stop Konfirmasi", jop.YES_NO_OPTION);
    if(pilih == 0){
        R13.setText("STOP");
        L002.setEnabled(true);
    }
    else{
        
    }
    }//GEN-LAST:event_R13ActionPerformed

    private void R12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_R12ActionPerformed
        // TODO add your handling code here:
        JOptionPane jop = new JOptionPane();
    int pilih = jop.showConfirmDialog(null, "Apakah Anda Yakin Untuk Menghentikan Proses Counter CLA T011 ?", "CIP Stop Konfirmasi", jop.YES_NO_OPTION);
    if(pilih == 0){
        R12.setText("STOP");
        T011.setEnabled(true);
    }
    else{
        
    }
    }//GEN-LAST:event_R12ActionPerformed

    private void R11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_R11ActionPerformed
        // TODO add your handling code here:
    JOptionPane jop = new JOptionPane();
    int pilih = jop.showConfirmDialog(null, "Apakah Anda Yakin Untuk Menghentikan Proses Counter CLA L001 ?", "CIP Stop Konfirmasi", jop.YES_NO_OPTION);
    if(pilih == 0){
        R11.setText("STOP");
        L001.setEnabled(true);
    }
    else{
        
    }
    }//GEN-LAST:event_R11ActionPerformed

    private void L003ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_L003ActionPerformed
        // TODO add your handling code here:
        L003.setEnabled(false);
        R16.setText("RESET");
        T16.setBackground(Color.white);
        int waktumulai = 0;
        int a = 0;
        int b = 0;
        int e = 0;
        String status = "";
        Calendar kalender = new GregorianCalendar();
        int j = kalender.get(Calendar.HOUR);
        int m = kalender.get(Calendar.MINUTE);
        int month = kalender.get(Calendar.MONTH);
        int year = kalender.get(Calendar.YEAR);
        int second = kalender.get(Calendar.SECOND);
        final int date = kalender.get(Calendar.DATE);
        int am_pm = kalender.get(Calendar.AM_PM);
        month = month+1;

        if(m > 30){
            b = ((2*m)-60);
        }

        if(m < 31){
            b = m;
        }

        if(j > 11){
            a = (a + j)-12;
        }

        if(j < 12){
            a = j;
        }
        
        if(am_pm == 1){
           status = "Sore";
        }
        
        if(am_pm == 0){
           status = "Pagi";
        }

        e = 1 + date;

        final int c = a;
        final int d = b;
        final int f = e;

        System.out.println("Nilai a = "+a);
        System.out.println("Nilai b = "+b);
        System.out.println("Waktu CIP jam = "+a+":"+b);
        String time = e+"/"+month+"/"+year+" | "+j + ":" + m + ":" + second+" "+status;
        A6.setText(time);
        new Thread(){
            int down = 86400;
            public void run(){
                while(waktumulai == 0){
                    Calendar kalender = new GregorianCalendar();
                    int jam = kalender.get(Calendar.HOUR);
                    int menit = kalender.get(Calendar.MINUTE);
                    int detik = kalender.get(Calendar.SECOND);
                    int tahun = kalender.get(Calendar.YEAR);
                    int bulan = kalender.get(Calendar.MONTH);
                    int tanggal = kalender.get(Calendar.DATE);
                    int AM_PM = kalender.get(Calendar.AM_PM);
                    down--;
                    R16.setEnabled(true);

                    T16.setText((String.valueOf(down))+" S");

                    String time = tanggal+" "+bulan+" "+tahun+" "+jam + ":" + menit + ":" + detik + " ";
                    System.out.println(time);

                    if((down>2)&&(down<1200)){
                        T16.setBackground(Color.yellow);
                        try {
                            sleep(100);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        T16.setBackground(Color.green);
                    }

                    if((jam >= c)&&(menit >= d)&&(date != tanggal)&&(AM_PM == am_pm)){
                        System.out.println("Over");
                        T16.setBackground(Color.red);
                        T16.setText("");
                        L003.setEnabled(true);
                        L003.setBackground(Color.green);
                        final JDialog dialog = new JDialog();
                        dialog.setAlwaysOnTop(true);    
                        JOptionPane.showMessageDialog(dialog, "Waktunya CIP Line A L003");
                        stop();
                    }

                    if (R16.getText().equals("STOP")) {
                        R16.setEnabled(false);
                        T16.setText("");
                        A6.setText("CIP next Time");
                        T16.setBackground(Color.white);
                        L003.setBackground(Color.green);
                        stop();
                    }

                    try {
                        sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            }

        }.start();
    }//GEN-LAST:event_L003ActionPerformed

    private void T032ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T032ActionPerformed
        // TODO add your handling code here:
        T032.setEnabled(false);
        R15.setText("RESET");
        T15.setBackground(Color.white);
        int waktumulai = 0;
        int a = 0;
        int b = 0;
        int e = 0;
        String status = "";
        Calendar kalender = new GregorianCalendar();
        int j = kalender.get(Calendar.HOUR);
        int m = kalender.get(Calendar.MINUTE);
        int month = kalender.get(Calendar.MONTH);
        int year = kalender.get(Calendar.YEAR);
        int second = kalender.get(Calendar.SECOND);
        final int date = kalender.get(Calendar.DATE);
        int am_pm = kalender.get(Calendar.AM_PM);
        month = month+1;

        if(m > 30){
            b = ((2*m)-60);
        }

        if(m < 31){
            b = m;
        }

        if(j > 11){
            a = (a + j)-12;
        }

        if(j < 12){
            a = j;
        }
        
        if(am_pm == 1){
           status = "Sore";
        }
        
        if(am_pm == 0){
           status = "Pagi";
        }

        e = 1 + date;

        final int c = a;
        final int d = b;
        final int f = e;

        System.out.println("Nilai a = "+a);
        System.out.println("Nilai b = "+b);
        System.out.println("Waktu CIP jam = "+a+":"+b);
        String time = e+"/"+month+"/"+year+" | "+j + ":" + m + ":" + second+" "+status;
        A5.setText(time);
        new Thread(){
            int down = 86400;
            public void run(){
                while(waktumulai == 0){
                    Calendar kalender = new GregorianCalendar();
                    int jam = kalender.get(Calendar.HOUR);
                    int menit = kalender.get(Calendar.MINUTE);
                    int detik = kalender.get(Calendar.SECOND);
                    int tahun = kalender.get(Calendar.YEAR);
                    int bulan = kalender.get(Calendar.MONTH);
                    int tanggal = kalender.get(Calendar.DATE);
                    int AM_PM = kalender.get(Calendar.AM_PM);
                    down--;
                    R15.setEnabled(true);

                    T15.setText((String.valueOf(down))+" S");

                    String time = tanggal+" "+bulan+" "+tahun+" "+jam + ":" + menit + ":" + detik + " ";
                    System.out.println(time);

                    if((down>2)&&(down<1200)){
                        T15.setBackground(Color.yellow);
                        try {
                            sleep(100);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        T15.setBackground(Color.green);
                    }

                    if((jam >= c)&&(menit >= d)&&(date != tanggal)&&(AM_PM == am_pm)){
                        System.out.println("Over");
                        T15.setBackground(Color.red);
                        T15.setText("");
                        T032.setEnabled(true);
                        T032.setBackground(Color.green);
                        final JDialog dialog = new JDialog();
                        dialog.setAlwaysOnTop(true);    
                        JOptionPane.showMessageDialog(dialog, "Waktunya CIP Line A T032");
                        stop();
                    }

                    if (R15.getText().equals("STOP")) {
                        R15.setEnabled(false);
                        T15.setText("");
                        A5.setText("CIP next Time");
                        T15.setBackground(Color.white);
                        T032.setBackground(Color.green);
                        stop();
                    }

                    try {
                        sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            }

        }.start();
    }//GEN-LAST:event_T032ActionPerformed

    private void T031ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T031ActionPerformed
        // TODO add your handling code here:
        T031.setEnabled(false);
        R14.setText("RESET");
        T14.setBackground(Color.white);
        int waktumulai = 0;
        int a = 0;
        int b = 0;
        int e = 0;
        String status = "";
        Calendar kalender = new GregorianCalendar();
        int j = kalender.get(Calendar.HOUR);
        int m = kalender.get(Calendar.MINUTE);
        int month = kalender.get(Calendar.MONTH);
        int year = kalender.get(Calendar.YEAR);
        int second = kalender.get(Calendar.SECOND);
        final int date = kalender.get(Calendar.DATE);
        int am_pm = kalender.get(Calendar.AM_PM);
        month = month+1;

        if(m > 30){
            b = ((2*m)-60);
        }

        if(m < 31){
            b = m;
        }

        if(j > 11){
            a = (a + j)-12;
        }

        if(j < 12){
            a = j;
        }
        
        if(am_pm == 1){
           status = "Sore";
        }
        
        if(am_pm == 0){
           status = "Pagi";
        }

        e = 1 + date;

        final int c = a;
        final int d = b;
        final int f = e;

        System.out.println("Nilai a = "+a);
        System.out.println("Nilai b = "+b);
        System.out.println("Waktu CIP jam = "+a+":"+b);
        String time = e+"/"+month+"/"+year+" | "+j + ":" + m + ":" + second+" "+status;
        A4.setText(time);
        new Thread(){
            int down = 86400;
            public void run(){
                while(waktumulai == 0){
                    Calendar kalender = new GregorianCalendar();
                    int jam = kalender.get(Calendar.HOUR);
                    int menit = kalender.get(Calendar.MINUTE);
                    int detik = kalender.get(Calendar.SECOND);
                    int tahun = kalender.get(Calendar.YEAR);
                    int bulan = kalender.get(Calendar.MONTH);
                    int tanggal = kalender.get(Calendar.DATE);
                    int AM_PM = kalender.get(Calendar.AM_PM);
                    down--;
                    R14.setEnabled(true);

                    T14.setText((String.valueOf(down))+" S");

                    String time = tanggal+" "+bulan+" "+tahun+" "+jam + ":" + menit + ":" + detik + " ";
                    System.out.println(time);

                    if((down>2)&&(down<1200)){
                        T14.setBackground(Color.yellow);
                        try {
                            sleep(100);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        T14.setBackground(Color.green);
                    }

                    if((jam >= c)&&(menit >= d)&&(date != tanggal)&&(AM_PM == am_pm)){
                        System.out.println("Over");
                        T14.setBackground(Color.red);
                        T14.setText("");
                        T031.setEnabled(true);
                        T031.setBackground(Color.green);
                        final JDialog dialog = new JDialog();
                        dialog.setAlwaysOnTop(true);    
                        JOptionPane.showMessageDialog(dialog, "Waktunya CIP Line A T031");
                        stop();
                    }

                    if (R14.getText().equals("STOP")) {
                        R14.setEnabled(false);
                        T14.setText("");
                        A4.setText("CIP next Time");
                        T14.setBackground(Color.white);
                        T031.setBackground(Color.green);
                        stop();
                    }

                    try {
                        sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            }

        }.start();
    }//GEN-LAST:event_T031ActionPerformed

    private void L002ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_L002ActionPerformed
        // TODO add your handling code here:
        L002.setEnabled(false);
        R13.setText("RESET");
        T13.setBackground(Color.white);
        int waktumulai = 0;
        int a = 0;
        int b = 0;
        int e = 0;
        String status = "";
        Calendar kalender = new GregorianCalendar();
        int j = kalender.get(Calendar.HOUR);
        int m = kalender.get(Calendar.MINUTE);
        int month = kalender.get(Calendar.MONTH);
        int year = kalender.get(Calendar.YEAR);
        int second = kalender.get(Calendar.SECOND);
        final int date = kalender.get(Calendar.DATE);
        int am_pm = kalender.get(Calendar.AM_PM);
        month = month+1;

        if(m > 30){
            b = ((2*m)-60);
        }

        if(m < 31){
            b = m;
        }

        if(j > 11){
            a = (a + j)-12;
        }

        if(j < 12){
            a = j;
        }
        
        if(am_pm == 1){
           status = "Sore";
        }
        
        if(am_pm == 0){
           status = "Pagi";
        }

        e = 1 + date;

        final int c = a;
        final int d = b;
        final int f = e;

        System.out.println("Nilai a = "+a);
        System.out.println("Nilai b = "+b);
        System.out.println("Waktu CIP jam = "+a+":"+b);
        String time = e+"/"+month+"/"+year+" | "+j + ":" + m + ":" + second+" "+status;
        A3.setText(time);
        new Thread(){
            int down = 86400;
            public void run(){
                while(waktumulai == 0){
                    Calendar kalender = new GregorianCalendar();
                    int jam = kalender.get(Calendar.HOUR);
                    int menit = kalender.get(Calendar.MINUTE);
                    int detik = kalender.get(Calendar.SECOND);
                    int tahun = kalender.get(Calendar.YEAR);
                    int bulan = kalender.get(Calendar.MONTH);
                    int tanggal = kalender.get(Calendar.DATE);
                    int AM_PM = kalender.get(Calendar.AM_PM);
                    down--;
                    R13.setEnabled(true);

                    T13.setText((String.valueOf(down))+" S");

                    String time = tanggal+" "+bulan+" "+tahun+" "+jam + ":" + menit + ":" + detik + " ";
                    System.out.println(time);

                    if((down>2)&&(down<1200)){
                        T13.setBackground(Color.yellow);
                        try {
                            sleep(100);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        T13.setBackground(Color.green);
                    }

                    if((jam >= c)&&(menit >= d)&&(date != tanggal)&&(AM_PM == am_pm)){
                        System.out.println("Over");
                        T13.setBackground(Color.red);
                        T13.setText("");
                        L002.setEnabled(true);
                        L002.setBackground(Color.green);
                        final JDialog dialog = new JDialog();
                        dialog.setAlwaysOnTop(true);    
                        JOptionPane.showMessageDialog(dialog, "Waktunya CIP Line A L002");
                        stop();
                    }

                    if (R13.getText().equals("STOP")) {
                        R13.setEnabled(false);
                        T13.setText("");
                        A3.setText("CIP next Time");
                        T13.setBackground(Color.white);
                        L002.setBackground(Color.green);
                        stop();
                    }

                    try {
                        sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            }

        }.start();
    }//GEN-LAST:event_L002ActionPerformed

    private void T011ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T011ActionPerformed
        // TODO add your handling code here:
        T011.setEnabled(false);
        R12.setText("RESET");
        T12.setBackground(Color.white);
        int waktumulai = 0;
        int a = 0;
        int b = 0;
        int e = 0;
        String status = "";
        Calendar kalender = new GregorianCalendar();
        int j = kalender.get(Calendar.HOUR);
        int m = kalender.get(Calendar.MINUTE);
        int month = kalender.get(Calendar.MONTH);
        int year = kalender.get(Calendar.YEAR);
        int second = kalender.get(Calendar.SECOND);
        final int date = kalender.get(Calendar.DATE);
        int am_pm = kalender.get(Calendar.AM_PM);

        if(m > 30){
            b = ((2*m)-60);
        }

        if(m < 31){
            b = m;
        }

        if(j > 11){
            a = (a + j)-12;
        }

        if(j < 12){
            a = j;
        }
        
        if(am_pm == 1){
           status = "Sore";
        }
        
        if(am_pm == 0){
           status = "Pagi";
        }

        e = 1 + date;

        final int c = a;
        final int d = b;
        final int f = e;
        month = month+1;

        System.out.println("Nilai a = "+a);
        System.out.println("Nilai b = "+b);
        System.out.println("Waktu CIP jam = "+a+":"+b);
        String time = e+"/"+month+"/"+year+" | "+j + ":" + m + ":" + second+" "+status;
        A2.setText(time);
        new Thread(){
            int down = 86400;
            public void run(){
                while(waktumulai == 0){
                    Calendar kalender = new GregorianCalendar();
                    int jam = kalender.get(Calendar.HOUR);
                    int menit = kalender.get(Calendar.MINUTE);
                    int detik = kalender.get(Calendar.SECOND);
                    int tahun = kalender.get(Calendar.YEAR);
                    int bulan = kalender.get(Calendar.MONTH);
                    int tanggal = kalender.get(Calendar.DATE);
                    int AM_PM = kalender.get(Calendar.AM_PM);
                    down--;
                    R12.setEnabled(true);

                    T12.setText((String.valueOf(down))+" S");

                    String time = tanggal+" "+bulan+" "+tahun+" "+jam + ":" + menit + ":" + detik + " ";
                    System.out.println(time);

                    if((down>2)&&(down<1200)){
                        T12.setBackground(Color.yellow);
                        try {
                            sleep(100);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        T12.setBackground(Color.green);
                    }

                    if((jam >= c)&&(menit >= d)&&(date != tanggal)&&(AM_PM == am_pm)){
                        System.out.println("Over");
                        T12.setBackground(Color.red);
                        T12.setText("");
                        T011.setEnabled(true);
                        T011.setBackground(Color.green);
                        final JDialog dialog = new JDialog();
                        dialog.setAlwaysOnTop(true);    
                        JOptionPane.showMessageDialog(dialog, "Waktunya CIP Line A T011");
                        stop();
                    }

                    if (R12.getText().equals("STOP")) {
                        R12.setEnabled(false);
                        T12.setText("");
                        A2.setText("CIP next Time");
                        T12.setBackground(Color.white);
                        T011.setBackground(Color.green);
                        stop();
                    }

                    try {
                        sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            }

        }.start();
    }//GEN-LAST:event_T011ActionPerformed

    private void L001ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_L001ActionPerformed
        // TODO add your handling code here:
        L001.setEnabled(false);
        R11.setText("RESET");
        T11.setBackground(Color.white);
        int waktumulai = 0;
        int a = 0;
        int b = 0;
        int e = 0;
        String status = "";
        Calendar kalender = new GregorianCalendar();
        int j = kalender.get(Calendar.HOUR);
        int m = kalender.get(Calendar.MINUTE);
        int month = kalender.get(Calendar.MONTH);
        int year = kalender.get(Calendar.YEAR);
        int second = kalender.get(Calendar.SECOND);
        final int date = kalender.get(Calendar.DATE);
        int am_pm = kalender.get(Calendar.AM_PM);

        if(m > 30){
            b = ((2*m)-60);
        }

        if(m < 31){
            b = m;
        }

        if(j > 11){
            a = (a + j)-12;
        }

        if(j < 12){
            a = j;
        }
        
        if(am_pm == 1){
           status = "Sore";
        }
        
        if(am_pm == 0){
           status = "Pagi";
        }

        e = 1 + date;

        final int c = a;
        final int d = b;
        final int f = e;
        month = month+1;

        System.out.println("Nilai a = "+a);
        System.out.println("Nilai b = "+b);
        System.out.println("Waktu CIP jam = "+a+":"+b);
        String time = e+"/"+month+"/"+year+" | "+j + ":" + m + ":" + second+" "+status;
        A1.setText(time);
        new Thread(){
            int down = 86400;
            public void run(){
                while(waktumulai == 0){
                    Calendar kalender = new GregorianCalendar();
                    int jam = kalender.get(Calendar.HOUR);
                    int menit = kalender.get(Calendar.MINUTE);
                    int detik = kalender.get(Calendar.SECOND);
                    int tahun = kalender.get(Calendar.YEAR);
                    int bulan = kalender.get(Calendar.MONTH);
                    int tanggal = kalender.get(Calendar.DATE);
                    int AM_PM = kalender.get(Calendar.AM_PM);
                    down--;
                    R11.setEnabled(true);

                    T11.setText((String.valueOf(down))+" S");

                    String time = tanggal+" "+bulan+" "+tahun+" "+jam + ":" + menit + ":" + detik + " ";
                    System.out.println(time);

                    if((down>2)&&(down<1200)){
                        T11.setBackground(Color.yellow);
                        try {
                            sleep(100);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        T11.setBackground(Color.green);
                    }

                    if((jam >= c)&&(menit >= d)&&(date != tanggal)&&(AM_PM == am_pm)){
                        System.out.println("Over");
                        T11.setBackground(Color.red);
                        T11.setText("");
                        L001.setEnabled(true);
                        L001.setBackground(Color.green);
                        final JDialog dialog = new JDialog();
                        dialog.setAlwaysOnTop(true);    
                        JOptionPane.showMessageDialog(dialog, "Waktunya CIP Line A L001");
                        stop();
                    }

                    if (R11.getText().equals("STOP")) {
                        R11.setEnabled(false);
                        T11.setText("");
                        A1.setText("CIP next Time");
                        T11.setBackground(Color.white);
                        L001.setBackground(Color.green);
                        stop();
                    }

                    try {
                        sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            }

        }.start();
    }//GEN-LAST:event_L001ActionPerformed

    private void L009ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_L009ActionPerformed
        // TODO add your handling code here:
        L009.setEnabled(false);
        R21.setText("RESET");
        T21.setBackground(Color.white);
        int waktumulai = 0;
        int a = 0;
        int b = 0;
        int e = 0;
        String status = "";
        Calendar kalender = new GregorianCalendar();
        int j = kalender.get(Calendar.HOUR);
        int m = kalender.get(Calendar.MINUTE);
        int month = kalender.get(Calendar.MONTH);
        int year = kalender.get(Calendar.YEAR);
        int second = kalender.get(Calendar.SECOND);
        final int date = kalender.get(Calendar.DATE);
        int am_pm = kalender.get(Calendar.AM_PM);
        month = month+1;

        if(m > 30){
            b = ((2*m)-60);
        }

        if(m < 31){
            b = m;
        }

        if(j > 11){
            a = (a + j)-12;
        }

        if(j < 12){
            a = j;
        }
        
        if(am_pm == 1){
           status = "Sore";
        }
        
        if(am_pm == 0){
           status = "Pagi";
        }

        e = 1 + date;

        final int c = a;
        final int d = b;
        final int f = e;

        System.out.println("Nilai a = "+a);
        System.out.println("Nilai b = "+b);
        System.out.println("Waktu CIP jam = "+a+":"+b);
        String time = e+"/"+month+"/"+year+" | "+j + ":" + m + ":" + second+" "+status;
        B1.setText(time);
        new Thread(){
            int down = 86400;
            public void run(){
                while(waktumulai == 0){
                    Calendar kalender = new GregorianCalendar();
                    int jam = kalender.get(Calendar.HOUR);
                    int menit = kalender.get(Calendar.MINUTE);
                    int detik = kalender.get(Calendar.SECOND);
                    int tahun = kalender.get(Calendar.YEAR);
                    int bulan = kalender.get(Calendar.MONTH);
                    int tanggal = kalender.get(Calendar.DATE);
                    int AM_PM = kalender.get(Calendar.AM_PM);
                    down--;
                    R21.setEnabled(true);

                    T21.setText((String.valueOf(down))+" S");

                    String time = tanggal+" "+bulan+" "+tahun+" "+jam + ":" + menit + ":" + detik + " ";
                    System.out.println(time);

                    if((down>2)&&(down<1200)){
                        T21.setBackground(Color.yellow);
                        try {
                            sleep(100);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        T21.setBackground(Color.green);
                    }

                    if((jam >= c)&&(menit >= d)&&(date != tanggal)&&(AM_PM == am_pm)){
                        System.out.println("Over");
                        T21.setBackground(Color.red);
                        T21.setText("");
                        L009.setEnabled(true);
                        L009.setBackground(Color.green);
                        final JDialog dialog = new JDialog();
                        dialog.setAlwaysOnTop(true);    
                        JOptionPane.showMessageDialog(dialog, "Waktunya CIP Line B L009");
                        stop();
                    }

                    if (R21.getText().equals("STOP")) {
                        R21.setEnabled(false);
                        T21.setText("");
                        B1.setText("CIP next Time");
                        T21.setBackground(Color.white);
                        L009.setBackground(Color.green);
                        stop();
                    }

                    try {
                        sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            }

        }.start();
    }//GEN-LAST:event_L009ActionPerformed

    private void T041ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T041ActionPerformed
        // TODO add your handling code here:
        T041.setEnabled(false);
        R22.setText("RESET");
        T22.setBackground(Color.white);
        int waktumulai = 0;
        int a = 0;
        int b = 0;
        int e = 0;
        String status = "";
        Calendar kalender = new GregorianCalendar();
        int j = kalender.get(Calendar.HOUR);
        int m = kalender.get(Calendar.MINUTE);
        int month = kalender.get(Calendar.MONTH);
        int year = kalender.get(Calendar.YEAR);
        int second = kalender.get(Calendar.SECOND);
        final int date = kalender.get(Calendar.DATE);
        int am_pm = kalender.get(Calendar.AM_PM);
        month = month+1;

        if(m > 30){
            b = ((2*m)-60);
        }

        if(m < 31){
            b = m;
        }

        if(j > 11){
            a = (a + j)-12;
        }

        if(j < 12){
            a = j;
        }
        
        if(am_pm == 1){
           status = "Sore";
        }
        
        if(am_pm == 0){
           status = "Pagi";
        }

        e = 1 + date;

        final int c = a;
        final int d = b;
        final int f = e;

        System.out.println("Nilai a = "+a);
        System.out.println("Nilai b = "+b);
        System.out.println("Waktu CIP jam = "+a+":"+b);
        String time = e+"/"+month+"/"+year+" | "+j + ":" + m + ":" + second+" "+status;
        B2.setText(time);
        new Thread(){
            int down = 86400;
            public void run(){
                while(waktumulai == 0){
                    Calendar kalender = new GregorianCalendar();
                    int jam = kalender.get(Calendar.HOUR);
                    int menit = kalender.get(Calendar.MINUTE);
                    int detik = kalender.get(Calendar.SECOND);
                    int tahun = kalender.get(Calendar.YEAR);
                    int bulan = kalender.get(Calendar.MONTH);
                    int tanggal = kalender.get(Calendar.DATE);
                    int AM_PM = kalender.get(Calendar.AM_PM);
                    down--;
                    R22.setEnabled(true);

                    T22.setText((String.valueOf(down))+" S");

                    String time = tanggal+" "+bulan+" "+tahun+" "+jam + ":" + menit + ":" + detik + " ";
                    System.out.println(time);

                    if((down>2)&&(down<1200)){
                        T22.setBackground(Color.yellow);
                        try {
                            sleep(100);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        T22.setBackground(Color.green);
                    }

                    if((jam >= c)&&(menit >= d)&&(date != tanggal)&&(AM_PM == am_pm)){
                        System.out.println("Over");
                        T22.setBackground(Color.red);
                        T22.setText("");
                        T041.setEnabled(true);
                        T041.setBackground(Color.green);
                        final JDialog dialog = new JDialog();
                        dialog.setAlwaysOnTop(true);    
                        JOptionPane.showMessageDialog(dialog, "Waktunya CIP Line B T041");
                        stop();
                    }

                    if (R22.getText().equals("STOP")) {
                        R22.setEnabled(false);
                        T22.setText("");
                        B2.setText("CIP next Time");
                        T22.setBackground(Color.white);
                        T041.setBackground(Color.green);
                        stop();
                    }

                    try {
                        sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            }

        }.start();
    }//GEN-LAST:event_T041ActionPerformed

    private void T042ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T042ActionPerformed
        // TODO add your handling code here:
        T042.setEnabled(false);
        R23.setText("RESET");
        T23.setBackground(Color.white);
        int waktumulai = 0;
        int a = 0;
        int b = 0;
        int e = 0;
        String status = "";
        Calendar kalender = new GregorianCalendar();
        int j = kalender.get(Calendar.HOUR);
        int m = kalender.get(Calendar.MINUTE);
        int month = kalender.get(Calendar.MONTH);
        int year = kalender.get(Calendar.YEAR);
        int second = kalender.get(Calendar.SECOND);
        final int date = kalender.get(Calendar.DATE);
        int am_pm = kalender.get(Calendar.AM_PM);
        month = month+1;

        if(m > 30){
            b = ((2*m)-60);
        }

        if(m < 31){
            b = m;
        }

        if(j > 11){
            a = (a + j)-12;
        }

        if(j < 12){
            a = j;
        }
        
        if(am_pm == 1){
           status = "Sore";
        }
        
        if(am_pm == 0){
           status = "Pagi";
        }

        e = 1 + date;

        final int c = a;
        final int d = b;
        final int f = e;

        System.out.println("Nilai a = "+a);
        System.out.println("Nilai b = "+b);
        System.out.println("Waktu CIP jam = "+a+":"+b);
        String time = e+"/"+month+"/"+year+" | "+j + ":" + m + ":" + second+" "+status;
        B3.setText(time);
        new Thread(){
            int down = 86400;
            public void run(){
                while(waktumulai == 0){
                    Calendar kalender = new GregorianCalendar();
                    int jam = kalender.get(Calendar.HOUR);
                    int menit = kalender.get(Calendar.MINUTE);
                    int detik = kalender.get(Calendar.SECOND);
                    int tahun = kalender.get(Calendar.YEAR);
                    int bulan = kalender.get(Calendar.MONTH);
                    int tanggal = kalender.get(Calendar.DATE);
                    int AM_PM = kalender.get(Calendar.AM_PM);
                    down--;
                    R23.setEnabled(true);

                    T23.setText((String.valueOf(down))+" S");

                    String time = tanggal+" "+bulan+" "+tahun+" "+jam + ":" + menit + ":" + detik + " ";
                    System.out.println(time);

                    if((down>2)&&(down<1200)){
                        T23.setBackground(Color.yellow);
                        try {
                            sleep(100);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        T23.setBackground(Color.green);
                    }

                    if((jam >= c)&&(menit >= d)&&(date != tanggal)&&(AM_PM == am_pm)){
                        System.out.println("Over");
                        T23.setBackground(Color.red);
                        T23.setText("");
                        T042.setEnabled(true);
                        T042.setBackground(Color.green);
                        final JDialog dialog = new JDialog();
                        dialog.setAlwaysOnTop(true);    
                        JOptionPane.showMessageDialog(dialog, "Waktunya CIP Line B T042");
                        stop();
                    }

                    if (R23.getText().equals("STOP")) {
                        R23.setEnabled(false);
                        T23.setText("");
                        B3.setText("CIP next Time");
                        T23.setBackground(Color.white);
                        T042.setBackground(Color.green);
                        stop();
                    }

                    try {
                        sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            }

        }.start();
    }//GEN-LAST:event_T042ActionPerformed

    private void T051ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T051ActionPerformed
        // TODO add your handling code here:
        T051.setEnabled(false);
        R24.setText("RESET");
        T24.setBackground(Color.white);
        int waktumulai = 0;
        int a = 0;
        int b = 0;
        int e = 0;
        String status = "";
        Calendar kalender = new GregorianCalendar();
        int j = kalender.get(Calendar.HOUR);
        int m = kalender.get(Calendar.MINUTE);
        int month = kalender.get(Calendar.MONTH);
        int year = kalender.get(Calendar.YEAR);
        int second = kalender.get(Calendar.SECOND);
        final int date = kalender.get(Calendar.DATE);
        int am_pm = kalender.get(Calendar.AM_PM);
        month = month+1;

        if(m > 30){
            b = ((2*m)-60);
        }

        if(m < 31){
            b = m;
        }

        if(j > 11){
            a = (a + j)-12;
        }

        if(j < 12){
            a = j;
        }
        
        if(am_pm == 1){
           status = "Sore";
        }
        
        if(am_pm == 0){
           status = "Pagi";
        }

        e = 1 + date;

        final int c = a;
        final int d = b;
        final int f = e;

        System.out.println("Nilai a = "+a);
        System.out.println("Nilai b = "+b);
        System.out.println("Waktu CIP jam = "+a+":"+b);
        String time = e+"/"+month+"/"+year+" | "+j + ":" + m + ":" + second+" "+status;
        B4.setText(time);
        new Thread(){
            int down = 86400;
            public void run(){
                while(waktumulai == 0){
                    Calendar kalender = new GregorianCalendar();
                    int jam = kalender.get(Calendar.HOUR);
                    int menit = kalender.get(Calendar.MINUTE);
                    int detik = kalender.get(Calendar.SECOND);
                    int tahun = kalender.get(Calendar.YEAR);
                    int bulan = kalender.get(Calendar.MONTH);
                    int tanggal = kalender.get(Calendar.DATE);
                    int AM_PM = kalender.get(Calendar.AM_PM);
                    down--;
                    R24.setEnabled(true);

                    T24.setText((String.valueOf(down))+" S");

                    String time = tanggal+" "+bulan+" "+tahun+" "+jam + ":" + menit + ":" + detik + " ";
                    System.out.println(time);

                    if((down>2)&&(down<1200)){
                        T24.setBackground(Color.yellow);
                        try {
                            sleep(100);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        T24.setBackground(Color.green);
                    }

                    if((jam >= c)&&(menit >= d)&&(date != tanggal)&&(AM_PM == am_pm)){
                        System.out.println("Over");
                        T24.setBackground(Color.red);
                        T24.setText("");
                        T051.setEnabled(true);
                        T051.setBackground(Color.green);
                        final JDialog dialog = new JDialog();
                        dialog.setAlwaysOnTop(true);    
                        JOptionPane.showMessageDialog(dialog, "Waktunya CIP Line B T051");
                        stop();
                    }

                    if (R24.getText().equals("STOP")) {
                        R24.setEnabled(false);
                        T24.setText("");
                        B4.setText("CIP next Time");
                        T24.setBackground(Color.white);
                        T051.setBackground(Color.green);
                        stop();
                    }

                    try {
                        sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            }

        }.start();
    }//GEN-LAST:event_T051ActionPerformed

    private void T061ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T061ActionPerformed
        // TODO add your handling code here:
        T061.setEnabled(false);
        R25.setText("RESET");
        T25.setBackground(Color.white);
        int waktumulai = 0;
        int a = 0;
        int b = 0;
        int e = 0;
        String status = "";
        Calendar kalender = new GregorianCalendar();
        int j = kalender.get(Calendar.HOUR);
        int m = kalender.get(Calendar.MINUTE);
        int month = kalender.get(Calendar.MONTH);
        int year = kalender.get(Calendar.YEAR);
        int second = kalender.get(Calendar.SECOND);
        final int date = kalender.get(Calendar.DATE);
        int am_pm = kalender.get(Calendar.AM_PM);
        month = month+1;

        if(m > 30){
            b = ((2*m)-60);
        }

        if(m < 31){
            b = m;
        }

        if(j > 11){
            a = (a + j)-12;
        }

        if(j < 12){
            a = j;
        }
        
        if(am_pm == 1){
           status = "Sore";
        }
        
        if(am_pm == 0){
           status = "Pagi";
        }

        e = 1 + date;

        final int c = a;
        final int d = b;
        final int f = e;

        System.out.println("Nilai a = "+a);
        System.out.println("Nilai b = "+b);
        System.out.println("Waktu CIP jam = "+a+":"+b);
        String time = e+"/"+month+"/"+year+" | "+j + ":" + m + ":" + second+" "+status;
        B5.setText(time);
        new Thread(){
            int down = 86400;
            public void run(){
                while(waktumulai == 0){
                    Calendar kalender = new GregorianCalendar();
                    int jam = kalender.get(Calendar.HOUR);
                    int menit = kalender.get(Calendar.MINUTE);
                    int detik = kalender.get(Calendar.SECOND);
                    int tahun = kalender.get(Calendar.YEAR);
                    int bulan = kalender.get(Calendar.MONTH);
                    int tanggal = kalender.get(Calendar.DATE);
                    int AM_PM = kalender.get(Calendar.AM_PM);
                    down--;
                    R25.setEnabled(true);

                    T25.setText((String.valueOf(down))+" S");

                    String time = tanggal+" "+bulan+" "+tahun+" "+jam + ":" + menit + ":" + detik + " ";
                    System.out.println(time);

                    if((down>2)&&(down<1200)){
                        T25.setBackground(Color.yellow);
                        try {
                            sleep(100);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        T25.setBackground(Color.green);
                    }

                    if((jam >= c)&&(menit >= d)&&(date != tanggal)&&(AM_PM == am_pm)){
                        System.out.println("Over");
                        T25.setBackground(Color.red);
                        T25.setText("");
                        T061.setEnabled(true);
                        T061.setBackground(Color.green);
                        final JDialog dialog = new JDialog();
                        dialog.setAlwaysOnTop(true);    
                        JOptionPane.showMessageDialog(dialog, "Waktunya CIP Line B T061");
                        stop();
                    }

                    if (R25.getText().equals("STOP")) {
                        R25.setEnabled(false);
                        T25.setText("");
                        B5.setText("CIP next Time");
                        T25.setBackground(Color.white);
                        T061.setBackground(Color.green);
                        stop();
                    }

                    try {
                        sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            }

        }.start();
    }//GEN-LAST:event_T061ActionPerformed

    private void L010ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_L010ActionPerformed
        // TODO add your handling code here:
        L010.setEnabled(false);
        R26.setText("RESET");
        T26.setBackground(Color.white);
        int waktumulai = 0;
        int a = 0;
        int b = 0;
        int e = 0;
        String status = "";
        Calendar kalender = new GregorianCalendar();
        int j = kalender.get(Calendar.HOUR);
        int m = kalender.get(Calendar.MINUTE);
        int month = kalender.get(Calendar.MONTH);
        int year = kalender.get(Calendar.YEAR);
        int second = kalender.get(Calendar.SECOND);
        final int date = kalender.get(Calendar.DATE);
        int am_pm = kalender.get(Calendar.AM_PM);
        month = month+1;

        if(m > 30){
            b = ((2*m)-60);
        }

        if(m < 31){
            b = m;
        }

        if(j > 11){
            a = (a + j)-12;
        }

        if(j < 12){
            a = j;
        }
        
        if(am_pm == 1){
           status = "Sore";
        }
        
        if(am_pm == 0){
           status = "Pagi";
        }

        e = 1 + date;

        final int c = a;
        final int d = b;
        final int f = e;

        System.out.println("Nilai a = "+a);
        System.out.println("Nilai b = "+b);
        System.out.println("Waktu CIP jam = "+a+":"+b);
        String time = e+"/"+month+"/"+year+" | "+j + ":" + m + ":" + second+" "+status;
        B6.setText(time);
        new Thread(){
            int down = 86400;
            public void run(){
                while(waktumulai == 0){
                    Calendar kalender = new GregorianCalendar();
                    int jam = kalender.get(Calendar.HOUR);
                    int menit = kalender.get(Calendar.MINUTE);
                    int detik = kalender.get(Calendar.SECOND);
                    int tahun = kalender.get(Calendar.YEAR);
                    int bulan = kalender.get(Calendar.MONTH);
                    int tanggal = kalender.get(Calendar.DATE);
                    int AM_PM = kalender.get(Calendar.AM_PM);
                    down--;
                    R26.setEnabled(true);

                    T26.setText((String.valueOf(down))+" S");

                    String time = tanggal+" "+bulan+" "+tahun+" "+jam + ":" + menit + ":" + detik + " ";
                    System.out.println(time);

                    if((down>2)&&(down<1200)){
                        T26.setBackground(Color.yellow);
                        try {
                            sleep(100);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        T26.setBackground(Color.green);
                    }

                    if((jam >= c)&&(menit >= d)&&(date != tanggal)&&(AM_PM == am_pm)){
                        System.out.println("Over");
                        T26.setBackground(Color.red);
                        T26.setText("");
                        L010.setEnabled(true);
                        L010.setBackground(Color.green);
                        final JDialog dialog = new JDialog();
                        dialog.setAlwaysOnTop(true);    
                        JOptionPane.showMessageDialog(dialog, "Waktunya CIP Line B L010");
                        stop();
                    }

                    if (R26.getText().equals("STOP")) {
                        R26.setEnabled(false);
                        T26.setText("");
                        B6.setText("CIP next Time");
                        T26.setBackground(Color.white);
                        L010.setBackground(Color.green);
                        stop();
                    }

                    try {
                        sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            }

        }.start();
    }//GEN-LAST:event_L010ActionPerformed

    private void T091ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T091ActionPerformed
        // TODO add your handling code here:
        T091.setEnabled(false);
        R27.setText("RESET");
        T27.setBackground(Color.white);
        int waktumulai = 0;
        int a = 0;
        int b = 0;
        int e = 0;
        String status = "";
        Calendar kalender = new GregorianCalendar();
        int j = kalender.get(Calendar.HOUR);
        int m = kalender.get(Calendar.MINUTE);
        int month = kalender.get(Calendar.MONTH);
        int year = kalender.get(Calendar.YEAR);
        int second = kalender.get(Calendar.SECOND);
        final int date = kalender.get(Calendar.DATE);
        int am_pm = kalender.get(Calendar.AM_PM);
        month = month+1;

        if(m > 30){
            b = ((2*m)-60);
        }

        if(m < 31){
            b = m;
        }

        if(j > 11){
            a = (a + j)-12;
        }

        if(j < 12){
            a = j;
        }
        
        if(am_pm == 1){
           status = "Sore";
        }
        
        if(am_pm == 0){
           status = "Pagi";
        }

        e = 1 + date;

        final int c = a;
        final int d = b;
        final int f = e;

        System.out.println("Nilai a = "+a);
        System.out.println("Nilai b = "+b);
        System.out.println("Waktu CIP jam = "+a+":"+b);
        String time = e+"/"+month+"/"+year+" | "+j + ":" + m + ":" + second+" "+status;
        B7.setText(time);
        new Thread(){
            int down = 86400;
            public void run(){
                while(waktumulai == 0){
                    Calendar kalender = new GregorianCalendar();
                    int jam = kalender.get(Calendar.HOUR);
                    int menit = kalender.get(Calendar.MINUTE);
                    int detik = kalender.get(Calendar.SECOND);
                    int tahun = kalender.get(Calendar.YEAR);
                    int bulan = kalender.get(Calendar.MONTH);
                    int tanggal = kalender.get(Calendar.DATE);
                    int AM_PM = kalender.get(Calendar.AM_PM);
                    down--;
                    R27.setEnabled(true);

                    T27.setText((String.valueOf(down))+" S");

                    String time = tanggal+" "+bulan+" "+tahun+" "+jam + ":" + menit + ":" + detik + " ";
                    System.out.println(time);

                    if((down>2)&&(down<1200)){
                        T27.setBackground(Color.yellow);
                        try {
                            sleep(100);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        T27.setBackground(Color.green);
                    }

                    if((jam >= c)&&(menit >= d)&&(date != tanggal)&&(AM_PM == am_pm)){
                        System.out.println("Over");
                        T27.setBackground(Color.red);
                        T27.setText("");
                        T091.setEnabled(true);
                        T091.setBackground(Color.green);
                        final JDialog dialog = new JDialog();
                        dialog.setAlwaysOnTop(true);    
                        JOptionPane.showMessageDialog(dialog, "Waktunya CIP Line B T091");
                        stop();
                    }

                    if (R27.getText().equals("STOP")) {
                        R27.setEnabled(false);
                        T27.setText("");
                        B7.setText("CIP next Time");
                        T27.setBackground(Color.white);
                        T091.setBackground(Color.green);
                        stop();
                    }

                    try {
                        sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            }

        }.start();
    }//GEN-LAST:event_T091ActionPerformed

    private void T092ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T092ActionPerformed
        // TODO add your handling code here:
        T092.setEnabled(false);
        R28.setText("RESET");
        T28.setBackground(Color.white);
        int waktumulai = 0;
        int a = 0;
        int b = 0;
        int e = 0;
        String status = "";
        Calendar kalender = new GregorianCalendar();
        int j = kalender.get(Calendar.HOUR);
        int m = kalender.get(Calendar.MINUTE);
        int month = kalender.get(Calendar.MONTH);
        int year = kalender.get(Calendar.YEAR);
        int second = kalender.get(Calendar.SECOND);
        final int date = kalender.get(Calendar.DATE);
        int am_pm = kalender.get(Calendar.AM_PM);
        month = month+1;

        if(m > 30){
            b = ((2*m)-60);
        }

        if(m < 31){
            b = m;
        }

        if(j > 11){
            a = (a + j)-12;
        }

        if(j < 12){
            a = j;
        }
        
        if(am_pm == 1){
           status = "Sore";
        }
        
        if(am_pm == 0){
           status = "Pagi";
        }

        e = 1 + date;

        final int c = a;
        final int d = b;
        final int f = e;

        System.out.println("Nilai a = "+a);
        System.out.println("Nilai b = "+b);
        System.out.println("Waktu CIP jam = "+a+":"+b);
        String time = e+"/"+month+"/"+year+" | "+j + ":" + m + ":" + second+" "+status;
        B8.setText(time);
        new Thread(){
            int down = 86400;
            public void run(){
                while(waktumulai == 0){
                    Calendar kalender = new GregorianCalendar();
                    int jam = kalender.get(Calendar.HOUR);
                    int menit = kalender.get(Calendar.MINUTE);
                    int detik = kalender.get(Calendar.SECOND);
                    int tahun = kalender.get(Calendar.YEAR);
                    int bulan = kalender.get(Calendar.MONTH);
                    int tanggal = kalender.get(Calendar.DATE);
                    int AM_PM = kalender.get(Calendar.AM_PM);
                    down--;
                    R28.setEnabled(true);

                    T28.setText((String.valueOf(down))+" S");

                    String time = tanggal+" "+bulan+" "+tahun+" "+jam + ":" + menit + ":" + detik + " ";
                    System.out.println(time);

                    if((down>2)&&(down<1200)){
                        T28.setBackground(Color.yellow);
                        try {
                            sleep(100);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        T28.setBackground(Color.green);
                    }

                    if((jam >= c)&&(menit >= d)&&(date != tanggal)&&(AM_PM == am_pm)){
                        System.out.println("Over");
                        T28.setBackground(Color.red);
                        T28.setText("");
                        T092.setEnabled(true);
                        T092.setBackground(Color.green);
                        final JDialog dialog = new JDialog();
                        dialog.setAlwaysOnTop(true);    
                        JOptionPane.showMessageDialog(dialog, "Waktunya CIP Line B T092");
                        stop();
                    }

                    if (R28.getText().equals("STOP")) {
                        R28.setEnabled(false);
                        T28.setText("");
                        B8.setText("CIP next Time");
                        T28.setBackground(Color.white);
                        T092.setBackground(Color.green);
                        stop();
                    }

                    try {
                        sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            }

        }.start();
    }//GEN-LAST:event_T092ActionPerformed

    private void T093ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T093ActionPerformed
        // TODO add your handling code here:
        T093.setEnabled(false);
        R29.setText("RESET");
        T29.setBackground(Color.white);
        int waktumulai = 0;
        int a = 0;
        int b = 0;
        int e = 0;
        String status = "";
        Calendar kalender = new GregorianCalendar();
        int j = kalender.get(Calendar.HOUR);
        int m = kalender.get(Calendar.MINUTE);
        int month = kalender.get(Calendar.MONTH);
        int year = kalender.get(Calendar.YEAR);
        int second = kalender.get(Calendar.SECOND);
        final int date = kalender.get(Calendar.DATE);
        int am_pm = kalender.get(Calendar.AM_PM);
        month = month+1;

        if(m > 30){
            b = ((2*m)-60);
        }

        if(m < 31){
            b = m;
        }

        if(j > 11){
            a = (a + j)-12;
        }

        if(j < 12){
            a = j;
        }
        
        if(am_pm == 1){
           status = "Sore";
        }
        
        if(am_pm == 0){
           status = "Pagi";
        }

        e = 1 + date;

        final int c = a;
        final int d = b;
        final int f = e;

        System.out.println("Nilai a = "+a);
        System.out.println("Nilai b = "+b);
        System.out.println("Waktu CIP jam = "+a+":"+b);
        String time = e+"/"+month+"/"+year+" | "+j + ":" + m + ":" + second+" "+status;
        B9.setText(time);
        new Thread(){
            int down = 86400;
            public void run(){
                while(waktumulai == 0){
                    Calendar kalender = new GregorianCalendar();
                    int jam = kalender.get(Calendar.HOUR);
                    int menit = kalender.get(Calendar.MINUTE);
                    int detik = kalender.get(Calendar.SECOND);
                    int tahun = kalender.get(Calendar.YEAR);
                    int bulan = kalender.get(Calendar.MONTH);
                    int tanggal = kalender.get(Calendar.DATE);
                    int AM_PM = kalender.get(Calendar.AM_PM);
                    down--;
                    R29.setEnabled(true);

                    T29.setText((String.valueOf(down))+" S");

                    String time = tanggal+" "+bulan+" "+tahun+" "+jam + ":" + menit + ":" + detik + " ";
                    System.out.println(time);

                    if((down>2)&&(down<1200)){
                        T29.setBackground(Color.yellow);
                        try {
                            sleep(100);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        T29.setBackground(Color.green);
                    }

                    if((jam >= c)&&(menit >= d)&&(date != tanggal)&&(AM_PM == am_pm)){
                        System.out.println("Over");
                        T29.setBackground(Color.red);
                        T29.setText("");
                        T093.setEnabled(true);
                        T093.setBackground(Color.green);
                        final JDialog dialog = new JDialog();
                        dialog.setAlwaysOnTop(true);    
                        JOptionPane.showMessageDialog(dialog, "Waktunya CIP Line B T093");
                        stop();
                    }

                    if (R29.getText().equals("STOP")) {
                        R29.setEnabled(false);
                        T29.setText("");
                        B9.setText("CIP next Time");
                        T29.setBackground(Color.white);
                        T093.setBackground(Color.green);
                        stop();
                    }

                    try {
                        sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            }

        }.start();
    }//GEN-LAST:event_T093ActionPerformed

    private void L014ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_L014ActionPerformed
        // TODO add your handling code here:
        L014.setEnabled(false);
        R20.setText("RESET");
        T20.setBackground(Color.white);
        int waktumulai = 0;
        int a = 0;
        int b = 0;
        int e = 0;
        String status = "";
        Calendar kalender = new GregorianCalendar();
        int j = kalender.get(Calendar.HOUR);
        int m = kalender.get(Calendar.MINUTE);
        int month = kalender.get(Calendar.MONTH);
        int year = kalender.get(Calendar.YEAR);
        int second = kalender.get(Calendar.SECOND);
        final int date = kalender.get(Calendar.DATE);
        int am_pm = kalender.get(Calendar.AM_PM);
        month = month+1;

        if(m > 30){
            b = ((2*m)-60);
        }

        if(m < 31){
            b = m;
        }

        if(j > 11){
            a = (a + j)-12;
        }

        if(j < 12){
            a = j;
        }
        
        if(am_pm == 1){
           status = "Sore";
        }
        
        if(am_pm == 0){
           status = "Pagi";
        }

        e = 1 + date;

        final int c = a;
        final int d = b;
        final int f = e;

        System.out.println("Nilai a = "+a);
        System.out.println("Nilai b = "+b);
        System.out.println("Waktu CIP jam = "+a+":"+b);
        String time = e+"/"+month+"/"+year+" | "+j + ":" + m + ":" + second+" "+status;
        B0.setText(time);
        new Thread(){
            int down = 86400;
            public void run(){
                while(waktumulai == 0){
                    Calendar kalender = new GregorianCalendar();
                    int jam = kalender.get(Calendar.HOUR);
                    int menit = kalender.get(Calendar.MINUTE);
                    int detik = kalender.get(Calendar.SECOND);
                    int tahun = kalender.get(Calendar.YEAR);
                    int bulan = kalender.get(Calendar.MONTH);
                    int tanggal = kalender.get(Calendar.DATE);
                    int AM_PM = kalender.get(Calendar.AM_PM);
                    down--;
                    R20.setEnabled(true);

                    T20.setText((String.valueOf(down))+" S");

                    String time = tanggal+" "+bulan+" "+tahun+" "+jam + ":" + menit + ":" + detik + " ";
                    System.out.println(time);

                    if((down>2)&&(down<1200)){
                        T20.setBackground(Color.yellow);
                        try {
                            sleep(100);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        T20.setBackground(Color.green);
                    }

                    if((jam >= c)&&(menit >= d)&&(date != tanggal)&&(AM_PM == am_pm)){
                        System.out.println("Over");
                        T20.setBackground(Color.red);
                        T20.setText("");
                        L014.setEnabled(true);
                        L014.setBackground(Color.green);
                        final JDialog dialog = new JDialog();
                        dialog.setAlwaysOnTop(true);    
                        JOptionPane.showMessageDialog(dialog, "Waktunya CIP Line B L014");
                        stop();
                    }

                    if (R20.getText().equals("STOP")) {
                        R20.setEnabled(false);
                        T20.setText("");
                        B0.setText("CIP next Time");
                        T20.setBackground(Color.white);
                        L014.setBackground(Color.green);
                        stop();
                    }

                    try {
                        sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            }

        }.start();
    }//GEN-LAST:event_L014ActionPerformed

    private void R28ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_R28ActionPerformed
        // TODO add your handling code here:
        JOptionPane jop = new JOptionPane();
    int pilih = jop.showConfirmDialog(null, "Apakah Anda Yakin Untuk Menghentikan Proses Counter CLB T092 ?", "CIP Stop Konfirmasi", jop.YES_NO_OPTION);
    if(pilih == 0){
        R28.setText("STOP");
        T092.setEnabled(true);
    }
    else{
        
    }
    }//GEN-LAST:event_R28ActionPerformed

    private void TA02ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TA02ActionPerformed
        // TODO add your handling code here:
        TA02.setEnabled(false);
        R31.setText("RESET");
        T31.setBackground(Color.white);
        int waktumulai = 0;
        int a = 0;
        int b = 0;
        int e = 0;
        String status = "";
        Calendar kalender = new GregorianCalendar();
        int j = kalender.get(Calendar.HOUR);
        int m = kalender.get(Calendar.MINUTE);
        int month = kalender.get(Calendar.MONTH);
        int year = kalender.get(Calendar.YEAR);
        int second = kalender.get(Calendar.SECOND);
        final int date = kalender.get(Calendar.DATE);
        int am_pm = kalender.get(Calendar.AM_PM);
        month = month+1;

        if(m > 30){
            b = ((2*m)-60);
        }

        if(m < 31){
            b = m;
        }

        if(j > 11){
            a = (a + j)-12;
        }

        if(j < 12){
            a = j;
        }
        
        if(am_pm == 1){
           status = "Sore";
        }
        
        if(am_pm == 0){
           status = "Pagi";
        }

        e = 1 + date;

        final int c = a;
        final int d = b;
        final int f = e;

        System.out.println("Nilai a = "+a);
        System.out.println("Nilai b = "+b);
        System.out.println("Waktu CIP jam = "+a+":"+b);
        String time = e+"/"+month+"/"+year+" | "+j + ":" + m + ":" + second+" "+status;
        C1.setText(time);
        new Thread(){
            int down = 86400;
            public void run(){
                while(waktumulai == 0){
                    Calendar kalender = new GregorianCalendar();
                    int jam = kalender.get(Calendar.HOUR);
                    int menit = kalender.get(Calendar.MINUTE);
                    int detik = kalender.get(Calendar.SECOND);
                    int tahun = kalender.get(Calendar.YEAR);
                    int bulan = kalender.get(Calendar.MONTH);
                    int tanggal = kalender.get(Calendar.DATE);
                    int AM_PM = kalender.get(Calendar.AM_PM);
                    down--;
                    R31.setEnabled(true);

                    T31.setText((String.valueOf(down))+" S");

                    String time = tanggal+" "+bulan+" "+tahun+" "+jam + ":" + menit + ":" + detik + " ";
                    System.out.println(time);

                    if((down>2)&&(down<1200)){
                        T31.setBackground(Color.yellow);
                        try {
                            sleep(100);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        T31.setBackground(Color.green);
                    }

                    if((jam >= c)&&(menit >= d)&&(date != tanggal)&&(AM_PM == am_pm)){
                        System.out.println("Over");
                        T31.setBackground(Color.red);
                        T31.setText("");
                        TA02.setEnabled(true);
                        TA02.setBackground(Color.green);
                        final JDialog dialog = new JDialog();
                        dialog.setAlwaysOnTop(true);    
                        JOptionPane.showMessageDialog(dialog, "Waktunya CIP Line C TA02");
                        stop();
                    }

                    if (R31.getText().equals("STOP")) {
                        R31.setEnabled(false);
                        T31.setText("");
                        C1.setText("CIP next Time");
                        T31.setBackground(Color.white);
                        TA02.setBackground(Color.green);
                        stop();
                    }

                    try {
                        sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            }

        }.start();
    }//GEN-LAST:event_TA02ActionPerformed

    private void R21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_R21ActionPerformed
        // TODO add your handling code here:
        JOptionPane jop = new JOptionPane();
    int pilih = jop.showConfirmDialog(null, "Apakah Anda Yakin Untuk Menghentikan Proses Counter CLB L009 ?", "CIP Stop Konfirmasi", jop.YES_NO_OPTION);
    if(pilih == 0){
        R21.setText("STOP");
        L009.setEnabled(true);
    }
    else{
        
    }
    }//GEN-LAST:event_R21ActionPerformed

    private void R22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_R22ActionPerformed
        // TODO add your handling code here:
        JOptionPane jop = new JOptionPane();
    int pilih = jop.showConfirmDialog(null, "Apakah Anda Yakin Untuk Menghentikan Proses Counter CLB T041 ?", "CIP Stop Konfirmasi", jop.YES_NO_OPTION);
    if(pilih == 0){
        R22.setText("STOP");
        T041.setEnabled(true);
    }
    else{
        
    }
    }//GEN-LAST:event_R22ActionPerformed

    private void R23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_R23ActionPerformed
        // TODO add your handling code here:
        JOptionPane jop = new JOptionPane();
    int pilih = jop.showConfirmDialog(null, "Apakah Anda Yakin Untuk Menghentikan Proses Counter CLB T042 ?", "CIP Stop Konfirmasi", jop.YES_NO_OPTION);
    if(pilih == 0){
        R23.setText("STOP");
        T042.setEnabled(true);
    }
    else{
        
    }
    }//GEN-LAST:event_R23ActionPerformed

    private void R24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_R24ActionPerformed
        // TODO add your handling code here:
        JOptionPane jop = new JOptionPane();
    int pilih = jop.showConfirmDialog(null, "Apakah Anda Yakin Untuk Menghentikan Proses Counter CLB T051 ?", "CIP Stop Konfirmasi", jop.YES_NO_OPTION);
    if(pilih == 0){
        R24.setText("STOP");
        T051.setEnabled(true);
    }
    else{
        
    }
    }//GEN-LAST:event_R24ActionPerformed

    private void R25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_R25ActionPerformed
        // TODO add your handling code here:
        JOptionPane jop = new JOptionPane();
    int pilih = jop.showConfirmDialog(null, "Apakah Anda Yakin Untuk Menghentikan Proses Counter CLB T061 ?", "CIP Stop Konfirmasi", jop.YES_NO_OPTION);
    if(pilih == 0){
        R25.setText("STOP");
        T061.setEnabled(true);
    }
    else{
        
    }
    }//GEN-LAST:event_R25ActionPerformed

    private void R26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_R26ActionPerformed
        // TODO add your handling code here:
        JOptionPane jop = new JOptionPane();
    int pilih = jop.showConfirmDialog(null, "Apakah Anda Yakin Untuk Menghentikan Proses Counter CLB L010 ?", "CIP Stop Konfirmasi", jop.YES_NO_OPTION);
    if(pilih == 0){
        R26.setText("STOP");
        L010.setEnabled(true);
    }
    else{
        
    }
    }//GEN-LAST:event_R26ActionPerformed

    private void R27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_R27ActionPerformed
        // TODO add your handling code here:
        JOptionPane jop = new JOptionPane();
    int pilih = jop.showConfirmDialog(null, "Apakah Anda Yakin Untuk Menghentikan Proses Counter CLA T091 ?", "CIP Stop Konfirmasi", jop.YES_NO_OPTION);
    if(pilih == 0){
        R27.setText("STOP");
        T091.setEnabled(true);
    }
    else{
        
    }
    }//GEN-LAST:event_R27ActionPerformed

    private void R29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_R29ActionPerformed
        // TODO add your handling code here:
        JOptionPane jop = new JOptionPane();
    int pilih = jop.showConfirmDialog(null, "Apakah Anda Yakin Untuk Menghentikan Proses Counter CLB T093 ?", "CIP Stop Konfirmasi", jop.YES_NO_OPTION);
    if(pilih == 0){
        R29.setText("STOP");
        T093.setEnabled(true);
    }
    else{
        
    }
    }//GEN-LAST:event_R29ActionPerformed

    private void R20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_R20ActionPerformed
        // TODO add your handling code here:
        JOptionPane jop = new JOptionPane();
    int pilih = jop.showConfirmDialog(null, "Apakah Anda Yakin Untuk Menghentikan Proses Counter CLB L014 ?", "CIP Stop Konfirmasi", jop.YES_NO_OPTION);
    if(pilih == 0){
        R20.setText("STOP");
        L014.setEnabled(true);
    }
    else{
        
    }
    }//GEN-LAST:event_R20ActionPerformed

    private void R31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_R31ActionPerformed
        // TODO add your handling code here:
        JOptionPane jop = new JOptionPane();
    int pilih = jop.showConfirmDialog(null, "Apakah Anda Yakin Untuk Menghentikan Proses Counter CLC TA02 ?", "CIP Stop Konfirmasi", jop.YES_NO_OPTION);
    if(pilih == 0){
        R31.setText("STOP");
        TA02.setEnabled(true);
    }
    else{
        
    }
    }//GEN-LAST:event_R31ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        JOptionPane jop = new JOptionPane();
        int pilih = jop.showConfirmDialog(null, "Apakah Anda Yakin Ingin Keluar Program CIP ?", "CLOSE Program", jop.YES_NO_OPTION);
        if(pilih == 0){
            try {
                Robot robot = new Robot();
                String format = "jpg";
                String fileName = "FullScreenshot." + format;

                Rectangle screenRect = new Rectangle(Toolkit.getDefaultToolkit().getScreenSize());
                BufferedImage screenFullImage = robot.createScreenCapture(screenRect);
                ImageIO.write(screenFullImage, format, new File("C:\\image\\FullScreenshot.jpg"));

                System.out.println("A full screenshot saved!");
                
            } catch (AWTException | IOException ex) {
                System.err.println(ex);
            }
            exit(0);
        }
        else{

        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
    JFrame f = new JFrame("Load Image Sample");
            
        f.addWindowListener(new WindowAdapter(){
                public void windowClosing(WindowEvent e) {
                    
                }
            });

        f.add(new LoadImageApp());
        f.pack();
        f.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void EXPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EXPActionPerformed
        // TODO add your handling code here:
        EXP.setEnabled(false);
        REXP.setText("RESET");
        TL8.setBackground(Color.white);
        int waktumulai = 0;
        int a = 0;
        int b = 0;
        int e = 0;
        String status = "";
        Calendar kalender = new GregorianCalendar();
        int j = kalender.get(Calendar.HOUR);
        int m = kalender.get(Calendar.MINUTE);
        int month = kalender.get(Calendar.MONTH);
        int year = kalender.get(Calendar.YEAR);
        int second = kalender.get(Calendar.SECOND);
        final int date = kalender.get(Calendar.DATE);
        int am_pm = kalender.get(Calendar.AM_PM);
        month = month+1;
        
        m = m + 5;

        if(m > 60){
            b = m - 60;
        }

        if(m <= 60){
            b = m;
        }

        if(j > 11){
            a = (a + j)-12;
        }

        if(j < 12){
            a = j;
        }
        
        if(am_pm == 1){
           status = "Sore";
        }
        
        if(am_pm == 0){
           status = "Pagi";
        }

        e = date;

        final int c = a;
        final int d = b;
        final int f = e;

        System.out.println("Nilai a = "+a);
        System.out.println("Nilai b = "+b);
        System.out.println("Waktu CIP jam = "+a+":"+b);
        String time = e+"/"+month+"/"+year+" | "+j + ":" + m + ":" + second+" "+status;
        E1.setText(time);
        new Thread(){
            int down = 30;
            public void run(){
                while(waktumulai == 0){
                    Calendar kalender = new GregorianCalendar();
                    int jam = kalender.get(Calendar.HOUR);
                    int menit = kalender.get(Calendar.MINUTE);
                    int detik = kalender.get(Calendar.SECOND);
                    int tahun = kalender.get(Calendar.YEAR);
                    int bulan = kalender.get(Calendar.MONTH);
                    int tanggal = kalender.get(Calendar.DATE);
                    int AM_PM = kalender.get(Calendar.AM_PM);
                    down--;
                    REXP.setEnabled(true);

                    TL8.setText((String.valueOf(down))+" S");

                    String time = tanggal+" "+bulan+" "+tahun+" "+jam + ":" + menit + ":" + detik + " ";
                    System.out.println(time);

                    if((down>1)&&(down<120)){
                        TL8.setBackground(Color.yellow);
                        try {
                            sleep(100);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        TL8.setBackground(Color.green);
                    }

                    if((jam >= c)&&(menit >= d)){
                        System.out.println("Over");
                        TL8.setBackground(Color.red);
                        TL8.setText("");
                        EXP.setEnabled(true);
                        EXP.setBackground(Color.green);
                        final JDialog dialog = new JDialog();
                        dialog.setAlwaysOnTop(true);    
                        JOptionPane.showMessageDialog(dialog, "Waktunya CIP Line Example");
                        stop();
                    }

                    if (REXP.getText().equals("STOP")) {
                        REXP.setEnabled(false);
                        TL8.setText("");
                        E1.setText("CIP next Time");
                        TL8.setBackground(Color.white);
                        EXP.setBackground(Color.green);
                        stop();
                    }

                    try {
                        sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            }

        }.start();
    }//GEN-LAST:event_EXPActionPerformed

    private void REXPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_REXPActionPerformed
        // TODO add your handling code here:
        JOptionPane jop = new JOptionPane();
    int pilih = jop.showConfirmDialog(null, "Apakah Anda Yakin Untuk Menghentikan Proses Counter Example ?", "CIP Stop Konfirmasi", jop.YES_NO_OPTION);
    if(pilih == 0){
        REXP.setText("STOP");
        EXP.setEnabled(true);
    }
    else{
        
    }
    }//GEN-LAST:event_REXPActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AplikasiCIPControlRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AplikasiCIPControlRoom().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField A1;
    private javax.swing.JTextField A2;
    private javax.swing.JTextField A3;
    private javax.swing.JTextField A4;
    private javax.swing.JTextField A5;
    private javax.swing.JTextField A6;
    private javax.swing.JTextField A7;
    private javax.swing.JTextField B0;
    private javax.swing.JTextField B1;
    private javax.swing.JTextField B2;
    private javax.swing.JTextField B3;
    private javax.swing.JTextField B4;
    private javax.swing.JTextField B5;
    private javax.swing.JTextField B6;
    private javax.swing.JTextField B7;
    private javax.swing.JTextField B8;
    private javax.swing.JTextField B9;
    private javax.swing.JTextField C1;
    private javax.swing.JTextField E1;
    private javax.swing.JButton EXP;
    private javax.swing.JButton L001;
    private javax.swing.JButton L002;
    private javax.swing.JButton L003;
    private javax.swing.JButton L009;
    private javax.swing.JButton L010;
    private javax.swing.JButton L014;
    private javax.swing.JButton R11;
    private javax.swing.JButton R12;
    private javax.swing.JButton R13;
    private javax.swing.JButton R14;
    private javax.swing.JButton R15;
    private javax.swing.JButton R16;
    private javax.swing.JButton R20;
    private javax.swing.JButton R21;
    private javax.swing.JButton R22;
    private javax.swing.JButton R23;
    private javax.swing.JButton R24;
    private javax.swing.JButton R25;
    private javax.swing.JButton R26;
    private javax.swing.JButton R27;
    private javax.swing.JButton R28;
    private javax.swing.JButton R29;
    private javax.swing.JButton R31;
    private javax.swing.JButton REXP;
    private javax.swing.JButton T011;
    private javax.swing.JButton T031;
    private javax.swing.JButton T032;
    private javax.swing.JButton T041;
    private javax.swing.JButton T042;
    private javax.swing.JButton T051;
    private javax.swing.JButton T061;
    private javax.swing.JButton T091;
    private javax.swing.JButton T092;
    private javax.swing.JButton T093;
    private javax.swing.JTextField T11;
    private javax.swing.JTextField T12;
    private javax.swing.JTextField T13;
    private javax.swing.JTextField T14;
    private javax.swing.JTextField T15;
    private javax.swing.JTextField T16;
    private javax.swing.JTextField T20;
    private javax.swing.JTextField T21;
    private javax.swing.JTextField T22;
    private javax.swing.JTextField T23;
    private javax.swing.JTextField T24;
    private javax.swing.JTextField T25;
    private javax.swing.JTextField T26;
    private javax.swing.JTextField T27;
    private javax.swing.JTextField T28;
    private javax.swing.JTextField T29;
    private javax.swing.JTextField T31;
    private javax.swing.JButton TA02;
    private javax.swing.JTextField TL8;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField texp;
    private javax.swing.JLabel waktu;
    // End of variables declaration//GEN-END:variables
}
